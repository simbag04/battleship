(()=>{"use strict";var e={28:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(537),i=n.n(r),a=n(645),o=n.n(a)()(i());o.push([e.id,"body {\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    justify-content: center;\n    align-items: center;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0px 20px;\n    padding-top: 10px;\n    font-size: 20px;\n    font-weight: bold;\n}\n\n.orientation {\n    display: flex;\n    gap: 20px;\n    justify-content: center;\n}\n.cell {\n    font-size: 12px;\n    width: 1em;\n    height: 1em;\n    border: 2px solid black;\n}\n\n.row {\n    display: flex;\n}\n\n.boards {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n}","",{version:3,sources:["webpack://./src/styles.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,iBAAiB;IACjB,iBAAiB;IACjB,eAAe;IACf,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,uBAAuB;AAC3B;AACA;IACI,eAAe;IACf,UAAU;IACV,WAAW;IACX,uBAAuB;AAC3B;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,uBAAuB;IACvB,SAAS;AACb",sourcesContent:["body {\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    justify-content: center;\n    align-items: center;\n}\n\n.header {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 0px 20px;\n    padding-top: 10px;\n    font-size: 20px;\n    font-weight: bold;\n}\n\n.orientation {\n    display: flex;\n    gap: 20px;\n    justify-content: center;\n}\n.cell {\n    font-size: 12px;\n    width: 1em;\n    height: 1em;\n    border: 2px solid black;\n}\n\n.row {\n    display: flex;\n}\n\n.boards {\n    display: flex;\n    justify-content: center;\n    gap: 20px;\n}"],sourceRoot:""}]);const l=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var l=0;l<this.length;l++){var c=this[l][0];null!=c&&(o[c]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);r&&o[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},o=[],l=0;l<e.length;l++){var c=e[l],s=r.base?c[0]+r.base:c[0],u=a[s]||0,p="".concat(s," ").concat(u);a[s]=u+1;var d=n(p),f={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(f);else{var A=i(f,r);r.byIndex=l,t.splice(l,0,{identifier:p,updater:A,references:1})}o.push(p)}return o}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var a=r(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var l=n(a[o]);t[l].references--}for(var c=r(e,i),s=0;s<a.length;s++){var u=n(a[s]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{function e(e){this.length=e,this.hits=0,this.sunk=!1}e.prototype.hit=function(){this.hits++},e.prototype.isSunk=function(){return this.sunk=this.hits==this.length,this.hits==this.length};const t=t=>{let n=(()=>{let e=[],t=Array(15).fill().map((()=>Array(15).fill(0)));const n=(e,n,r,i)=>{let a=e.length;if(i){for(let e=n;e<n+a;e++)if(e>=t.length||0!=t[e][r])return!1}else for(let e=r;e<r+a;e++)if(e>=t.length||0!=t[n][e])return!1;return!0},r=(e,n)=>0!=Math.floor(t[e][n]/10),i=(e,t)=>(e-=e%10)+t;return{placeShip:(r,a,o,l)=>{let c=r.length;if(!n(r,a,o,l))return!1;e.push(r);let s=e.length;if(l)for(let e=a;e<a+c;e++)t[e][o]=i(0,s);else for(let e=o;e<o+c;e++)t[a][e]=i(0,s);return!0},checkShipPlacement:n,receiveAttack:(n,i)=>{if(r(n,i))return!1;let a=t[n][i]%10;return t[n][i]+=10,0!=a&&e[a-1].hit(),!0},allShipsSunk:()=>{for(let t=0;t<e.length;t++)if(!e[t].isSunk())return!1;return!0},hasShip:(e,n)=>t[e][n]%10!=0,alreadyAttacked:r}})(),r=t,i=[new e(5),new e(4),new e(3),new e(3),new e(2)],a=0;const o=(e,t,r)=>!!n.placeShip(i[a],e,t,r)&&(a++,!0),l=()=>5==a,c=e=>Math.floor(Math.random()*e);return{placeShip:o,receiveAttack:(e,t)=>l()&&n.receiveAttack(e,t),allShipsPlaced:l,isComputer:()=>r,randomShipPlacements:()=>{for(;!l();){let e=c(15),t=c(15),n=1==c(2);o(e,t,n)}},allShipsSunk:()=>n.allShipsSunk(),getBoard:()=>n}},r=(()=>{let e,n,r,i=e,a=n;const o=(e,t)=>{if(i.isComputer()){let e,t;do{e=s(15),t=s(15)}while(!a.receiveAttack(e,t));return c(),l(),!0}return!!a.receiveAttack(e,t)&&(c(),l(),!0)},l=()=>{for(;i.isComputer()&&null==u();)o()},c=()=>{let e=i;i=a,a=e},s=e=>Math.floor(Math.random()*e),u=()=>e.allShipsSunk()?"p2":n.allShipsSunk()?"p1":null;return{initialize:(o,l)=>{e=t(o),n=t(l),i=e,a=n,e.isComputer()?e.randomShipPlacements():r=e,n.isComputer()?n.randomShipPlacements():r=n},placeShip:(t,i,a)=>{r.placeShip(t,i,a),r.allShipsPlaced()&&(r=r===e?n:e)},playTurn:o,playTurnsAutomatically:l,readyForTurns:()=>e.allShipsPlaced()&&n.allShipsPlaced(),getCurrentPlayer:()=>i==e?"p1":"p2",getWinner:u,getPlayer1Board:()=>e.getBoard(),getPlayer2Board:()=>n.getBoard(),getPlaceShipTurn:()=>r==e?"p1":"p2"}})(),i=(()=>{let e=document.querySelector(".board1"),t=document.querySelector(".board2"),n=document.querySelector("#reset"),i=document.querySelector("#orientation");n.addEventListener("click",(()=>{a()})),i.addEventListener("click",(()=>{let e=i.textContent;i.textContent="Vertical"==e?"Horizontal":"Vertical"}));const a=()=>{r.initialize(!1,!0),o(e,"p1"),o(t,"p2"),document.querySelector(".orientation").style.display="flex",document.querySelector(".winner").textContent=""},o=(e,t)=>{e.innerHTML="";let n="p1"==t?r.getPlayer1Board():r.getPlayer2Board();for(let r=0;r<15;r++){let i=document.createElement("div");i.classList.add("row");for(let e=0;e<15;e++){let a=document.createElement("div");a.classList.add("cell"),a.id=t+"x:"+r+"y:"+e,a.addEventListener("click",(e=>l(e))),n.hasShip(r,e)&&"p1"==t&&(a.style["background-color"]="green"),n.alreadyAttacked(r,e)&&(n.hasShip(r,e)?a.style.backgroundColor="red":a.style.backgroundColor="gray"),i.appendChild(a)}e.appendChild(i)}},l=n=>{let a=n.target.id,l=a.slice(0,2),u="p1"==l?e:t;if(r.readyForTurns()){if(!r.getWinner()&&r.getCurrentPlayer()!=l&&(r.playTurn(c(a),s(a)),o(e,"p1"),o(t,"p2"),r.getWinner())){let e=document.querySelector(".winner"),t=r.getWinner();e.textContent="p2"==t?"Computer wins!":"You win!"}}else if(r.getPlaceShipTurn()==l){let e="Vertical"==i.textContent;r.placeShip(c(a),s(a),e),o(u,l),r.readyForTurns()&&(document.querySelector(".orientation").style.display="none")}},c=e=>{let t=e.slice(5,6);return Number("y"!=t?e.slice(4,6):e.slice(4,5))},s=e=>{let t=e.indexOf("y");return Number(e.slice(t+2,e.length))};return{initialize:a}})();var a=n(379),o=n.n(a),l=n(795),c=n.n(l),s=n(569),u=n.n(s),p=n(565),d=n.n(p),f=n(216),A=n.n(f),h=n(589),y=n.n(h),m=n(28),g={};g.styleTagTransform=y(),g.setAttributes=d(),g.insert=u().bind(null,"head"),g.domAPI=c(),g.insertStyleElement=A(),o()(m.Z,g),m.Z&&m.Z.locals&&m.Z.locals,i.initialize()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,